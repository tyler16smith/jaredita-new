// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Donation {
    id                  String       @id @default(cuid())
    type                DonationType
    frequency           Frequency
    quantity            Int // Number of students sponsoring in case of INDIVIDUAL and FAMILY
    coverTransactionFee Boolean      @default(false) @map("cover_transaction_fee")
    amount              Int // Total amount of the donation
    firstName           String       @map("first_name")
    email               String
    selectedDonationIds String[]     @map("selected_donation_ids") // could be students, families, orphanages, or other/general
    completedCheckout   Boolean      @default(false) @map("completed_checkout")
    createdAt           DateTime     @default(now()) @map("created_at")
    updatedAt           DateTime     @updatedAt @map("updated_at")

    donor DonorDonation[]

    @@map("donations")
}

model Donor {
    id        String   @id @default(cuid())
    name      String
    email     String
    street    String?
    city      String?
    state     String?
    zip       String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    donations DonorDonation[]

    @@map("donors")
}

model DonorDonation {
    id         String       @id @default(cuid())
    donorId    String
    donationId String
    type       DonationType
    amount     Int
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt

    donation          Donation @relation(fields: [donationId], references: [id])
    donor             Donor    @relation(fields: [donorId], references: [id])
    donationSessionId String?

    @@map("donor_donations")
}

model Family {
    id          String   @id @default(cuid())
    familyName  String   @map("family_name")
    imageUrl    String   @map("image_url")
    email       String?
    fullAddress String   @map("full_address")
    city        String   @map("city")
    country     String   @map("country")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    students          Student[]
    donationSessionId String?

    @@map("families")
}

// orphanage or general donation opportunities
model OtherDonationOpportunity {
    id                String            @id @default(cuid())
    type              OtherDonationType
    title             String
    description       String
    imageUrl          String            @map("image_url")
    createdAt         DateTime          @default(now()) @map("created_at")
    updatedAt         DateTime          @updatedAt @map("updated_at")
    donationSessionId String?

    @@map("other_donation_opportunities")
}

model Student {
    id          String      @id @default(cuid())
    firstName   String      @map("first_name")
    lastName    String?     @map("last_name")
    age         Int
    gender      Gender
    imageUrl    String      @map("image_url")
    fullAddress String?     @map("full_address")
    city        String      @map("city")
    country     String      @map("country")
    gradeLevel  GradeLevel? @map("grade_level")
    email       String?
    familyId    String?     @map("family_id")
    createdAt   DateTime    @default(now()) @map("created_at")
    updatedAt   DateTime    @updatedAt @map("updated_at")

    family            Family? @relation(fields: [familyId], references: [id])
    donationSessionId String?

    @@map("students")
}

enum Frequency {
    once
    monthly
    yearly
}

enum DonationType {
    student
    family
    orphanage
    general
}

enum OtherDonationType {
    orphanage
    general
}

enum Gender {
    male
    female
}

enum GradeLevel {
    preK
    kindergarten
    first
    second
    third
    fourth
    fifth
    sixth
    seventh
    eighth
    ninth
    tenth
    eleventh
    twelfth
    thirteenth
    technicalSchool
    undergraduate
    masters
    phd
}
